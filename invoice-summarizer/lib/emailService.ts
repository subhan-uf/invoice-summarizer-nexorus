import nodemailer from "nodemailer";

import { supabase } from "./supabaseClient";
import { generateSummaryText } from "./utils";

// Create transporter
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.GMAIL_USER,
    pass: process.env.GMAIL_APP_PASSWORD, // Use App Password, not regular password
  },
});

export async function sendSummaryEmail(
  invoice: any,
  summary: any,
  authenticatedSupabase?: any,
) {
  try {
    // Use authenticated client if provided, otherwise use default
    const client = authenticatedSupabase || supabase;

    // Get user profile to get email - use the user_id from the invoice
    const userId = invoice.user_id;

    if (!userId) {
      return { success: false, error: "Invoice does not have user_id" };
    }

    // Get user auth data to get email
    const {
      data: { user },
      error: userError,
    } = await client.auth.admin.getUserById(userId);

    if (userError || !user) {
      return { success: false, error: "User not found" };
    }

    // Get client information if available
    let clientEmail = null;

    if (invoice.client) {
      const { data: clientData } = await client
        .from("clients")
        .select("email")
        .eq("name", invoice.client)
        .eq("user_id", userId)
        .single();

      if (clientData) {
        clientEmail = clientData.email;
      }
    }

    // Determine recipient email - prioritize user's email over client email
    // This ensures emails are sent to the account owner by default
    const recipientEmail = user.email || clientEmail;

    if (!recipientEmail) {
      return { success: false, error: "No recipient email found" };
    }

    // Create email content
    const emailSubject = `Summary of your invoice: ${invoice.name}`;

    // Convert summary object to readable text
    const summaryText =
      typeof summary === "string" ? summary : generateSummaryText(summary);

    const emailBody = `
    <html>
      <head>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .header { background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
          .summary { background-color: #e3f2fd; padding: 15px; border-radius: 8px; margin-bottom: 20px; }
          .footer { margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; font-size: 12px; color: #666; }
        </style>
      </head>
      <body>
        <div class="header">
          <h2>Invoice Summary</h2>
          <p><strong>Invoice:</strong> ${invoice.name}</p>
          <p><strong>Client:</strong> ${invoice.client || "Not specified"}</p>
          <p><strong>Date:</strong> ${invoice.date || "Not specified"}</p>
        </div>
        <div class="summary">
          <h3>Summary</h3>
          <pre style="white-space: pre-wrap; font-family: inherit;">${summaryText}</pre>
        </div>
        <div class="footer">
          <p>This summary was generated by AI Invoice Summarizer by Subhan.</p>
          <p>Generated on: ${new Date().toLocaleString()}</p>
        </div>
      </body>
    </html>
    `;

    // Send email
    const info = await transporter.sendMail({
      from: process.env.GMAIL_USER,
      to: recipientEmail,
      subject: emailSubject,
      html: emailBody,
    });

    // Log to email history
    if (authenticatedSupabase && invoice.user_id) {
      await authenticatedSupabase.from("email_history").insert({
        user_id: invoice.user_id,
        invoice_id: invoice.id,
        recipient_email: recipientEmail,
        subject: emailSubject,
        status: "sent",
        sent_at: new Date().toISOString(),
      });
    }

    return {
      success: true,
      message: "Summary email sent successfully",
      recipient: recipientEmail,
      messageId: info.messageId,
    };
  } catch (error) {
    console.error("Error sending summary email:", error);

    return { success: false, error: "Failed to send summary email" };
  }
}

export async function sendSummaryEmailToRecipient(
  invoice: any,
  summary: any,
  recipientEmail: string,
  authenticatedSupabase?: any,
) {
  try {
    // Create email content
    const emailSubject = `Summary of your invoice: ${invoice.name}`;

    // Convert summary object to readable text
    const summaryText =
      typeof summary === "string" ? summary : generateSummaryText(summary);

    const emailBody = `
    <html>
      <head>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .header { background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
          .summary { background-color: #e3f2fd; padding: 15px; border-radius: 8px; margin-bottom: 20px; }
          .footer { margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; font-size: 12px; color: #666; }
        </style>
      </head>
      <body>
        <div class="header">
          <h2>Invoice Summary</h2>
          <p><strong>Invoice:</strong> ${invoice.name}</p>
          <p><strong>Client:</strong> ${invoice.client || "Not specified"}</p>
          <p><strong>Date:</strong> ${invoice.date || "Not specified"}</p>
        </div>
        <div class="summary">
          <h3>Summary</h3>
          <pre style="white-space: pre-wrap; font-family: inherit;">${summaryText}</pre>
        </div>
        <div class="footer">
          <p>This summary was generated by AI Invoice Summarizer by Subhan.</p>
          <p>Generated on: ${new Date().toLocaleString()}</p>
        </div>
      </body>
    </html>
    `;

    // Send email
    const info = await transporter.sendMail({
      from: process.env.GMAIL_USER,
      to: recipientEmail,
      subject: emailSubject,
      html: emailBody,
    });

    // Log to email history
    if (authenticatedSupabase && invoice.user_id) {
      await authenticatedSupabase.from("email_history").insert({
        user_id: invoice.user_id,
        invoice_id: invoice.id,
        recipient_email: recipientEmail,
        subject: emailSubject,
        status: "sent",
        sent_at: new Date().toISOString(),
      });
    }

    return {
      success: true,
      message: "Summary email sent successfully",
      recipient: recipientEmail,
      messageId: info.messageId,
    };
  } catch (error) {
    console.error("Error sending summary email to recipient:", error);

    return { success: false, error: "Failed to send summary email" };
  }
}
