import { ChatOpenAI } from '@langchain/openai';
import { PromptTemplate } from '@langchain/core/prompts';
import { StringOutputParser } from '@langchain/core/output_parsers';

// Initialize OpenAI model
const model = new ChatOpenAI({
  modelName: 'gpt-3.5-turbo',
  temperature: 0.3,
  openAIApiKey: process.env.OPENAI_API_KEY,
});

// Create prompt template for invoice summarization
const summarizePrompt = PromptTemplate.fromTemplate(`
You are an AI assistant specialized in analyzing and summarizing invoices. Please analyze the following invoice text and provide a comprehensive summary in JSON format.

Invoice Text:
{invoiceText}

Invoice Details:
- Name: {invoiceName}
- Client: {client}
- Date: {date}
- Amount: {amount}

Please provide a summary in the following JSON structure:
{{
  "summary": "A detailed 3-4 sentence summary of the invoice including key business context",
  "keyDetails": {{
    "vendor": "Name of the vendor/supplier/company that sent the invoice",
    "invoiceNumber": "Invoice number if found",
    "dueDate": "Due date if specified",
    "paymentTerms": "Payment terms if mentioned",
    "taxAmount": "Tax amount if specified",
    "subtotal": "Subtotal before tax if specified"
  }},
  "clientInfo": {{
    "name": "Company name of the vendor/supplier",
    "email": "Email address if found in the invoice",
    "company": "Full company name or business name",
    "address": "Company address if available",
    "phone": "Phone number if available"
  }},
  "lineItems": [
    {{
      "description": "Item description",
      "quantity": "Quantity",
      "unitPrice": "Unit price",
      "total": "Line total"
    }}
  ],
  "totalAmount": "Total invoice amount",
  "invoiceDate": "Invoice date in YYYY-MM-DD format if found",
  "currency": "Currency if specified",
  "notes": "Any additional notes, special instructions, or important business context",
  "businessContext": "Additional business context like project details, service period, or contract information"
}}

If any information is not available in the invoice text, use null for that field. Focus on extracting the most important information that would be useful for accounting and business purposes. Make sure to identify the vendor/company that sent the invoice and extract their contact information.
`);

export async function summarizeInvoice(invoiceText: string, invoice: any) {
  try {
    // Create the chain
    const chain = summarizePrompt.pipe(model).pipe(new StringOutputParser());

    // Execute the chain
    const result = await chain.invoke({
      invoiceText: invoiceText,
      invoiceName: invoice.name || 'Unknown',
      client: invoice.client || 'Unknown',
      date: invoice.date || 'Unknown',
      amount: invoice.amount || 'Unknown',
    });

    // Parse the JSON response
    let parsedSummary;
    try {
      parsedSummary = JSON.parse(result);
    } catch (parseError) {
      console.error('Failed to parse AI response as JSON:', parseError);
      // Fallback to a simple text summary
      parsedSummary = {
        summary: result,
        keyDetails: {
          vendor: invoice.client || 'Unknown',
          invoiceNumber: 'Not specified',
          dueDate: 'Not specified',
          paymentTerms: 'Not specified',
          taxAmount: null,
          subtotal: null
        },
        clientInfo: {
          name: invoice.client || 'Unknown',
          email: null,
          company: invoice.client || 'Unknown',
          address: null,
          phone: null
        },
        lineItems: [],
        totalAmount: invoice.amount || 'Unknown',
        invoiceDate: invoice.date || null,
        currency: 'USD',
        notes: 'Summary generated by AI',
        businessContext: null
      };
    }

    return parsedSummary;

  } catch (error) {
    console.error('Error in invoice summarization:', error);
    throw new Error('Failed to summarize invoice');
  }
}

// Alternative function for simple text summarization (fallback)
export async function simpleSummarize(invoiceText: string) {
  try {
    const simplePrompt = PromptTemplate.fromTemplate(`
    Please provide a brief summary of this invoice in 2-3 sentences:
    
    {invoiceText}
    `);

    const chain = simplePrompt.pipe(model).pipe(new StringOutputParser());
    const result = await chain.invoke({ invoiceText });

    return {
      summary: result,
      keyDetails: {},
      lineItems: [],
      totalAmount: 'Unknown',
      currency: 'USD',
      notes: 'Simple summary generated by AI'
    };

  } catch (error) {
    console.error('Error in simple summarization:', error);
    throw new Error('Failed to generate simple summary');
  }
} 